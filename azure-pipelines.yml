# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
- master

pool: Digital

variables:
  WORKDIR: /home/azure/zoe-build
  PROJ: zoe
  # for go build in alpine
  CGO_ENABLED: 0
  GOOS: linux 

steps:
- script: |
    pwd
    echo "$(System.DefaultWorkingDirectory)"
    echo "Get build ID $(Build.BuildId)"
    echo "Get build number $(Build.BuildNumber)"
  displayName: 'pwd and echo dir'

# - task: GoTool@0
#   displayName: 'Use Go 1.13'
#   inputs:
#     version: 1.13

- script: |
    rsync --delete -avz --exclude '.git' --exclude 'gopath' $(System.DefaultWorkingDirectory)/* $(WORKDIR)
  displayName: 'Sync the blog'

# - task: Go@0
#   displayName: 'go build'
#   inputs:
#     command: build
#     arguments: '-o zoe'
#     workingDirectory: '$(WORKDIR)'


- script: |
    echo "$(System.DefaultWorkingDirectory)"
    docker build . -t '$(PROJ):v$(Build.BuildId)'
  workingDirectory: '$(WORKDIR)'
  displayName: 'Build yiqi image'

# - script: |
#     docker stack deploy --compose-file docker-compose.yaml yiqi
#   workingDirectory: '$(WORKDIR)'
#   displayName: 'Use docker stack to run'

# - task: CopyFiles@2
#   displayName: 'Copy Files to: /home/azure/goyoubbs'
#   inputs:
#     SourceFolder: '$(WORKDIR)'
#     Contents: |
#      !.git/**/*
#      **/goyoubbs
#      **/view/**
#      **/static/**
#      whooshsearch.py
#     TargetFolder: /home/azure/goyoubbs
#     OverWrite: true
# - script: |
#     mkdir -p '$(GOBIN)'
#     mkdir -p '$(GOPATH)/pkg'
#     mkdir -p '$(modulePath)'
#     shopt -s extglob
#     shopt -s dotglob
#     mv !(gopath) '$(modulePath)'
#     echo '##vso[task.prependpath]$(GOBIN)'
#     echo '##vso[task.prependpath]$(GOROOT)/bin'
#   displayName: 'Set up the Go workspace'

# - script: |
#     go version
#     go get -v -t -d ./...
#     if [ -f Gopkg.toml ]; then
#         curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
#         dep ensure
#     fi
#     go build -v .
#   workingDirectory: '$(modulePath)'
#   displayName: 'Get dependencies, then build'
